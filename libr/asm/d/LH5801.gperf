%{
// gperf -aclEDCIG --null-strings -H sdb_hash_c_LH5801 -N sdb_get_c_LH5801 -t LH5801.gperf > LH5801.c
// gcc -DMAIN=1 LH5801.c ; ./a.out > LH5801.h
#include <stdio.h>
#include <ctype.h>
%}

struct kv { const char *name; const char *value; };
%%
adi,"add immediate"
rie,"reset interrupt enable"
spv,"set pv"
ita,"in to accumulator"
sta,"store accumulator"
eai,"exclusive or accumulator, immediate"
spu,"set pu"
sjp,"subroutine jump aka call"
atp,"accumulator to port"
adr,"add rreg"
att,"accumulator to t (status register)"
sdp,"set display"
bcc,"conditional branch"
am1,"accumulator to tm and 1"
ror,"rotate right"
am0,"accumulator to tm and 0"
drr,"digit rotate right"
jmp,"jump"
cdv,"clear divider"
vcc,"conditional vector subroutine jump"
bch,"unconditional branch"
dec,"decrement"
off,"reset bf"
cpa,"compare accumulator"
stx,"store xreg"
sin,"store and increment"
ldi,"load immediate"
rol,"rotate left"
vmj,"vector subroutine jump, long format"
eor,"exclusive or"
cpi,"compare immediate"
lde,"load and decrement"
rec,"reset carry flag"
tin,"transfer and increment"
sde,"store and decrement"
sie,"set interrupt enable"
lda,"load accumulator"
bii,"bit test immediate"
dca,"decimal add"
lin,"load and increment"
lop,"loop"
rpv,"reset pv"
ani,"and immediate"
sbc,"subtract with carry"
rpu,"reset pu"
ldx,"load xreg"
rti,"return from interrupt"
sbi,"subtract immediate"
drl,"digit rotate left"
hlt,"halt"
rtn,"return from subroutine"
dcs,"decimal subtract"
shr,"shift right"
and,"and accumulator"
aex,"exchange accumulator"
tta,"t status register to accumulator"
rdp,"reset display"
bit,"bit test"
shl,"shift left"
ori,"or immediate"
nop,"no operation"
adc,"add with carry"
pop,"pop"
vej,"vector subroutine jump, short format"
ora,"or accumulator"
sec,"set carry flag"
psh,"push"
inc,"increment"
cin,"compare and increment"
%%
// SDB-CGEN V1.7.0
// 0x55d2d8171170
const char* gperf_LH5801_get(const char *s) {
	const struct kv *o = sdb_get_c_LH5801 (s, strlen(s));
	return o? o->value: NULL;
}
const unsigned int gperf_LH5801_hash(const char *s) {
	return sdb_hash_c_LH5801(s, strlen (s));
}
struct {const char*name;void*get;void*hash;} gperf_LH5801 = {
	.name = "LH5801",
	.get = &gperf_LH5801_get,
	.hash = &gperf_LH5801_hash
};

#if MAIN
int main () {
	char line[1024];
	FILE *fd = fopen ("LH5801.gperf", "r");
	if (!fd) {
		fprintf (stderr, "Cannot open LH5801.gperf\n");
		return 1;
	}
	int mode = 0;
	printf ("#ifndef INCLUDE_LH5801_H\n");
	printf ("#define INCLUDE_LH5801_H 1\n");
	while (!feof (fd)) {
		*line = 0;
		fgets (line, sizeof (line), fd);
		if (mode == 1) {
			char *comma = strchr (line, ',');
			if (comma) {
				*comma = 0;
				char *up = strdup (line);
				char *p = up; while (*p) { *p = toupper (*p); p++; }
				printf ("#define GPERF_LH5801_%s %d\n",
					line, sdb_hash_c_LH5801 (line, comma - line));
			}
		}
		if (*line == '%' && line[1] == '%')
			mode++;
	}
	printf ("#endif\n");
}
#endif

