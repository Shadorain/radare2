%{
// gperf -aclEDCIG --null-strings -H sdb_hash_c_6502 -N sdb_get_c_6502 -t 6502.gperf > 6502.c
// gcc -DMAIN=1 6502.c ; ./a.out > 6502.h
#include <stdio.h>
#include <ctype.h>
%}

struct kv { const char *name; const char *value; };
%%
plp,"pull processor status from stack"
txs,"transfer index x to stack pointer"
brk,"force break"
dex,"decrement index x by one"
sec,"set carry flag"
dey,"decrement index y by one"
ora,"'or' memory with accumulator"
clv,"clear overflow flag"
stx,"store index x in memory"
sty,"store index y in memory"
tsx,"transfer stack pointer to index x"
sed,"set decimal mode"
bne,"branch on result not zero"
sei,"set interrupt disable status"
bpl,"branch on result plus"
php,"push processor status on stack"
pla,"pull accumulator from stack"
tya,"transfer index y to accumulator"
and,"'and' memory with accumulator"
nop,"no operation"
inx,"increment index x by one"
iny,"increment index y by one"
cpx,"compare memory and index x"
bvs,"branch on overflow set"
cpy,"compare memory and index y"
bit,"test bits in memory with accumulator"
rti,"return from interrupt"
pha,"push accumulator on stack"
bcc,"branch on carry clear"
cmp,"compare memory and accumulator"
rts,"return from subroutine"
tax,"transfer accumulator to index x"
tay,"transfer accumulator to index y"
sbc,"subtract memory from accumulator with borrow"
bvc,"branch on overflow clear"
lsr,"shift right one bit (memory or accumulator)"
cli,"clear interrupt disable bit"
dec,"decrement memory by one"
sta,"store accumulator in memory"
txa,"transfer index x to accumulator"
lda,"load accumulator with memory"
bcs,"branch on carry set"
clc,"clear carry flag"
ror,"rotate one bit right (memory or accumulator)"
beq,"branch on result zero"
asl,"shift left one bit (memory or accumulator)"
jsr,"jump to new location saving return address"
bmi,"branch on result minus"
cld,"clear decimal mode"
adc,"add memory to accumulator with carry"
ldy,"load index y with memory"
ldx,"load index x with memory"
eor,"'exclusive-or' memory with accumulator"
inc,"increment memory by one"
rol,"rotate one bit left (memory or accumulator)"
jmp,"jump to new location"
%%
// SDB-CGEN V1.7.0
// 0x55a562a58160
const char* gperf_6502_get(const char *s) {
	const struct kv *o = sdb_get_c_6502 (s, strlen(s));
	return o? o->value: NULL;
}
const unsigned int gperf_6502_hash(const char *s) {
	return sdb_hash_c_6502(s, strlen (s));
}
struct {const char*name;void*get;void*hash;} gperf_6502 = {
	.name = "6502",
	.get = &gperf_6502_get,
	.hash = &gperf_6502_hash
};

#if MAIN
int main () {
	char line[1024];
	FILE *fd = fopen ("6502.gperf", "r");
	if (!fd) {
		fprintf (stderr, "Cannot open 6502.gperf\n");
		return 1;
	}
	int mode = 0;
	printf ("#ifndef INCLUDE_6502_H\n");
	printf ("#define INCLUDE_6502_H 1\n");
	while (!feof (fd)) {
		*line = 0;
		fgets (line, sizeof (line), fd);
		if (mode == 1) {
			char *comma = strchr (line, ',');
			if (comma) {
				*comma = 0;
				char *up = strdup (line);
				char *p = up; while (*p) { *p = toupper (*p); p++; }
				printf ("#define GPERF_6502_%s %d\n",
					line, sdb_hash_c_6502 (line, comma - line));
			}
		}
		if (*line == '%' && line[1] == '%')
			mode++;
	}
	printf ("#endif\n");
}
#endif

